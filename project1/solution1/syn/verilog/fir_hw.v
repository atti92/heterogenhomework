// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_hw,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc6slx9tqg144-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.490000,HLS_SYN_LAT=770,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=100,HLS_SYN_LUT=259}" *)

module fir_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V,
        res_V,
        res_V_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 9'b1;
parameter    ap_ST_st2_fsm_1 = 9'b10;
parameter    ap_ST_st3_fsm_2 = 9'b100;
parameter    ap_ST_st4_fsm_3 = 9'b1000;
parameter    ap_ST_st5_fsm_4 = 9'b10000;
parameter    ap_ST_st6_fsm_5 = 9'b100000;
parameter    ap_ST_st7_fsm_6 = 9'b1000000;
parameter    ap_ST_st8_fsm_7 = 9'b10000000;
parameter    ap_ST_st9_fsm_8 = 9'b100000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv39_0 = 39'b000000000000000000000000000000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv7_7F = 7'b1111111;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv17_0 = 17'b00000000000000000;
parameter    ap_const_lv18_1FFFF = 18'b11111111111111111;
parameter    ap_const_lv18_20001 = 18'b100000000000000001;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] input_V;
output  [17:0] res_V;
output   res_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_V_ap_vld;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm = 9'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_25;
reg   [6:0] smpl_V_address0;
reg    smpl_V_ce0;
reg    smpl_V_we0;
reg   [17:0] smpl_V_d0;
wire   [17:0] smpl_V_q0;
wire   [6:0] coeff_hw_V_address0;
reg    coeff_hw_V_ce0;
wire   [14:0] coeff_hw_V_q0;
wire   [6:0] i_1_fu_183_p2;
reg   [6:0] i_1_reg_525;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_59;
wire   [0:0] exitcond1_fu_177_p2;
wire   [7:0] i_2_fu_205_p2;
reg   [7:0] i_2_reg_538;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_74;
wire   [0:0] exitcond_fu_199_p2;
wire   [0:0] qb_assign_1_fu_249_p2;
reg   [0:0] qb_assign_1_reg_553;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_94;
wire  signed [38:0] accu_V_fu_273_p2;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_105;
wire   [17:0] p_Val2_2_fu_300_p2;
reg   [17:0] p_Val2_2_reg_573;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_114;
wire   [0:0] p_38_i_fu_400_p2;
reg   [0:0] p_38_i_reg_579;
wire   [0:0] brmerge_i_fu_412_p2;
reg   [0:0] brmerge_i_reg_584;
wire   [0:0] tmp_10_fu_440_p2;
reg   [0:0] tmp_10_reg_589;
reg   [6:0] i_reg_142;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_133;
reg   [38:0] p_Val2_s_reg_154;
reg   [7:0] i1_reg_166;
wire   [63:0] tmp_2_fu_189_p1;
wire   [63:0] tmp_fu_194_p1;
wire   [63:0] tmp_1_fu_211_p1;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_154;
wire   [15:0] tmp_14_fu_225_p1;
wire   [0:0] tmp_16_fu_235_p3;
wire   [0:0] r_fu_229_p2;
wire   [0:0] r_i_i_fu_243_p2;
wire   [0:0] qbit_fu_217_p3;
wire  signed [17:0] grp_fu_263_p0;
wire  signed [14:0] grp_fu_263_p1;
wire  signed [32:0] grp_fu_263_p2;
wire  signed [38:0] tmp_9_cast_fu_269_p1;
wire   [17:0] p_Val2_1_fu_279_p4;
wire   [17:0] tmp_s_fu_297_p1;
wire   [0:0] newsignbit_fu_306_p3;
wire   [0:0] tmp_15_fu_289_p3;
wire   [0:0] tmp_6_fu_314_p2;
wire   [2:0] tmp_9_fu_334_p4;
wire   [3:0] tmp_4_fu_350_p4;
wire   [0:0] carry_fu_320_p2;
wire   [0:0] Range1_all_ones_fu_360_p2;
wire   [0:0] Range1_all_zeros_fu_366_p2;
wire   [0:0] tmp_18_fu_326_p3;
wire   [0:0] Range2_all_ones_fu_344_p2;
wire   [0:0] tmp_7_fu_380_p2;
wire   [0:0] p_41_i_fu_386_p2;
wire   [0:0] deleted_zeros_fu_372_p3;
wire   [0:0] p_not_i_fu_406_p2;
wire   [0:0] deleted_ones_fu_392_p3;
wire   [0:0] brmerge40_demorgan_i_fu_418_p2;
wire   [16:0] tmp_19_fu_430_p1;
wire   [0:0] tmp_5_fu_434_p2;
wire   [0:0] brmerge40_i_fu_424_p2;
wire   [0:0] signbit_fu_446_p3;
wire   [0:0] tmp_3_fu_459_p2;
wire   [0:0] tmp_8_fu_454_p2;
wire   [0:0] tmp2_fu_470_p2;
wire   [0:0] underflow_fu_475_p2;
wire   [0:0] overflow_fu_465_p2;
wire   [0:0] underflow_2_not_fu_487_p2;
wire   [0:0] brmerge_i_i_fu_481_p2;
wire   [0:0] brmerge_fu_493_p2;
wire   [17:0] p_Val2_5_mux_fu_499_p3;
wire   [17:0] p_Val2_5_fu_506_p3;
wire    grp_fu_263_ce;
reg   [8:0] ap_NS_fsm;


fir_hw_smpl_V #(
    .DataWidth( 18 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
smpl_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( smpl_V_address0 ),
    .ce0( smpl_V_ce0 ),
    .we0( smpl_V_we0 ),
    .d0( smpl_V_d0 ),
    .q0( smpl_V_q0 )
);

fir_hw_coeff_hw_V #(
    .DataWidth( 15 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
coeff_hw_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( coeff_hw_V_address0 ),
    .ce0( coeff_hw_V_ce0 ),
    .q0( coeff_hw_V_q0 )
);

fir_hw_mul_18s_15s_33_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
fir_hw_mul_18s_15s_33_3_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_263_p0 ),
    .din1( grp_fu_263_p1 ),
    .ce( grp_fu_263_ce ),
    .dout( grp_fu_263_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        i1_reg_166 <= i_2_reg_538;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_177_p2 == ap_const_lv1_0))) begin
        i1_reg_166 <= ap_const_lv8_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_reg_142 <= i_1_reg_525;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_142 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        p_Val2_s_reg_154 <= accu_V_fu_273_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_177_p2 == ap_const_lv1_0))) begin
        p_Val2_s_reg_154 <= ap_const_lv39_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        brmerge_i_reg_584 <= brmerge_i_fu_412_p2;
        p_38_i_reg_579 <= p_38_i_fu_400_p2;
        p_Val2_2_reg_573 <= p_Val2_2_fu_300_p2;
        tmp_10_reg_589 <= tmp_10_fu_440_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_525 <= i_1_fu_183_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        i_2_reg_538 <= i_2_fu_205_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond_fu_199_p2))) begin
        qb_assign_1_reg_553 <= qb_assign_1_fu_249_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_8)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_8)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_25)
begin
    if (ap_sig_bdd_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_59)
begin
    if (ap_sig_bdd_59) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_133)
begin
    if (ap_sig_bdd_133) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_74)
begin
    if (ap_sig_bdd_74) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_94)
begin
    if (ap_sig_bdd_94) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_105)
begin
    if (ap_sig_bdd_105) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_114)
begin
    if (ap_sig_bdd_114) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_154)
begin
    if (ap_sig_bdd_154) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// coeff_hw_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        coeff_hw_V_ce0 = ap_const_logic_1;
    end else begin
        coeff_hw_V_ce0 = ap_const_logic_0;
    end
end

/// res_V_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_8)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        res_V_ap_vld = ap_const_logic_1;
    end else begin
        res_V_ap_vld = ap_const_logic_0;
    end
end

/// smpl_V_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_177_p2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st3_fsm_2 or tmp_2_fu_189_p1 or tmp_fu_194_p1 or tmp_1_fu_211_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        smpl_V_address0 = tmp_fu_194_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_177_p2 == ap_const_lv1_0))) begin
        smpl_V_address0 = ap_const_lv7_7F;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        smpl_V_address0 = tmp_1_fu_211_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_177_p2 == ap_const_lv1_0))) begin
        smpl_V_address0 = tmp_2_fu_189_p1;
    end else begin
        smpl_V_address0 = 'bx;
    end
end

/// smpl_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_177_p2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_177_p2 == ap_const_lv1_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_177_p2 == ap_const_lv1_0)))) begin
        smpl_V_ce0 = ap_const_logic_1;
    end else begin
        smpl_V_ce0 = ap_const_logic_0;
    end
end

/// smpl_V_d0 assign process. ///
always @ (input_V or smpl_V_q0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_177_p2 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        smpl_V_d0 = smpl_V_q0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_177_p2 == ap_const_lv1_0))) begin
        smpl_V_d0 = input_V;
    end else begin
        smpl_V_d0 = 'bx;
    end
end

/// smpl_V_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_177_p2 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_177_p2 == ap_const_lv1_0)))) begin
        smpl_V_we0 = ap_const_logic_1;
    end else begin
        smpl_V_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_177_p2 or exitcond_fu_199_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond1_fu_177_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_199_p2)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_360_p2 = (tmp_4_fu_350_p4 == ap_const_lv4_F? 1'b1: 1'b0);
assign Range1_all_zeros_fu_366_p2 = (tmp_4_fu_350_p4 == ap_const_lv4_0? 1'b1: 1'b0);
assign Range2_all_ones_fu_344_p2 = (tmp_9_fu_334_p4 == ap_const_lv3_7? 1'b1: 1'b0);
assign accu_V_fu_273_p2 = ($signed(p_Val2_s_reg_154) + $signed(tmp_9_cast_fu_269_p1));

/// ap_sig_bdd_105 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_105 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_114 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_114 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_133 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_133 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_154 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_154 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_25 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_25 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_59 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_59 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_74 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_74 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_94 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_94 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end
assign brmerge40_demorgan_i_fu_418_p2 = (newsignbit_fu_306_p3 & deleted_ones_fu_392_p3);
assign brmerge40_i_fu_424_p2 = (brmerge40_demorgan_i_fu_418_p2 ^ ap_const_lv1_1);
assign brmerge_fu_493_p2 = (overflow_fu_465_p2 | underflow_2_not_fu_487_p2);
assign brmerge_i_fu_412_p2 = (newsignbit_fu_306_p3 | p_not_i_fu_406_p2);
assign brmerge_i_i_fu_481_p2 = (underflow_fu_475_p2 | overflow_fu_465_p2);
assign carry_fu_320_p2 = (tmp_15_fu_289_p3 & tmp_6_fu_314_p2);
assign coeff_hw_V_address0 = tmp_1_fu_211_p1;
assign deleted_ones_fu_392_p3 = ((carry_fu_320_p2[0:0]===1'b1)? p_41_i_fu_386_p2: Range1_all_ones_fu_360_p2);
assign deleted_zeros_fu_372_p3 = ((carry_fu_320_p2[0:0]===1'b1)? Range1_all_ones_fu_360_p2: Range1_all_zeros_fu_366_p2);
assign exitcond1_fu_177_p2 = (i_reg_142 == ap_const_lv7_7F? 1'b1: 1'b0);
assign exitcond_fu_199_p2 = (i1_reg_166 == ap_const_lv8_80? 1'b1: 1'b0);
assign grp_fu_263_ce = ap_const_logic_1;
assign grp_fu_263_p0 = smpl_V_q0;
assign grp_fu_263_p1 = coeff_hw_V_q0;
assign i_1_fu_183_p2 = (i_reg_142 + ap_const_lv7_1);
assign i_2_fu_205_p2 = (i1_reg_166 + ap_const_lv8_1);
assign newsignbit_fu_306_p3 = p_Val2_2_fu_300_p2[ap_const_lv32_11];
assign overflow_fu_465_p2 = (brmerge_i_reg_584 & tmp_3_fu_459_p2);
assign p_38_i_fu_400_p2 = (carry_fu_320_p2 & Range1_all_ones_fu_360_p2);
assign p_41_i_fu_386_p2 = (Range2_all_ones_fu_344_p2 & tmp_7_fu_380_p2);
assign p_Val2_1_fu_279_p4 = {{p_Val2_s_reg_154[ap_const_lv32_22 : ap_const_lv32_11]}};
assign p_Val2_2_fu_300_p2 = (p_Val2_1_fu_279_p4 + tmp_s_fu_297_p1);
assign p_Val2_5_fu_506_p3 = ((underflow_fu_475_p2[0:0]===1'b1)? ap_const_lv18_20001: p_Val2_2_reg_573);
assign p_Val2_5_mux_fu_499_p3 = ((brmerge_i_i_fu_481_p2[0:0]===1'b1)? ap_const_lv18_1FFFF: p_Val2_2_reg_573);
assign p_not_i_fu_406_p2 = (deleted_zeros_fu_372_p3 ^ ap_const_lv1_1);
assign qb_assign_1_fu_249_p2 = (r_i_i_fu_243_p2 & qbit_fu_217_p3);
assign qbit_fu_217_p3 = p_Val2_s_reg_154[ap_const_lv32_10];
assign r_fu_229_p2 = (tmp_14_fu_225_p1 != ap_const_lv16_0? 1'b1: 1'b0);
assign r_i_i_fu_243_p2 = (tmp_16_fu_235_p3 | r_fu_229_p2);
assign res_V = ((brmerge_fu_493_p2[0:0]===1'b1)? p_Val2_5_mux_fu_499_p3: p_Val2_5_fu_506_p3);
assign signbit_fu_446_p3 = p_Val2_s_reg_154[ap_const_lv32_26];
assign tmp2_fu_470_p2 = (tmp_10_reg_589 & tmp_8_fu_454_p2);
assign tmp_10_fu_440_p2 = (tmp_5_fu_434_p2 | brmerge40_i_fu_424_p2);
assign tmp_14_fu_225_p1 = p_Val2_s_reg_154[15:0];
assign tmp_15_fu_289_p3 = p_Val2_s_reg_154[ap_const_lv32_22];
assign tmp_16_fu_235_p3 = p_Val2_s_reg_154[ap_const_lv32_11];
assign tmp_18_fu_326_p3 = p_Val2_s_reg_154[ap_const_lv32_23];
assign tmp_19_fu_430_p1 = p_Val2_2_fu_300_p2[16:0];
assign tmp_1_fu_211_p1 = i1_reg_166;
assign tmp_2_fu_189_p1 = i_1_fu_183_p2;
assign tmp_3_fu_459_p2 = (signbit_fu_446_p3 ^ ap_const_lv1_1);
assign tmp_4_fu_350_p4 = {{p_Val2_s_reg_154[ap_const_lv32_26 : ap_const_lv32_23]}};
assign tmp_5_fu_434_p2 = (tmp_19_fu_430_p1 == ap_const_lv17_0? 1'b1: 1'b0);
assign tmp_6_fu_314_p2 = (newsignbit_fu_306_p3 ^ ap_const_lv1_1);
assign tmp_7_fu_380_p2 = (tmp_18_fu_326_p3 ^ ap_const_lv1_1);
assign tmp_8_fu_454_p2 = (p_38_i_reg_579 ^ ap_const_lv1_1);
assign tmp_9_cast_fu_269_p1 = grp_fu_263_p2;
assign tmp_9_fu_334_p4 = {{p_Val2_s_reg_154[ap_const_lv32_26 : ap_const_lv32_24]}};
assign tmp_fu_194_p1 = i_reg_142;
assign tmp_s_fu_297_p1 = qb_assign_1_reg_553;
assign underflow_2_not_fu_487_p2 = (underflow_fu_475_p2 ^ ap_const_lv1_1);
assign underflow_fu_475_p2 = (tmp2_fu_470_p2 & signbit_fu_446_p3);


endmodule //fir_hw

