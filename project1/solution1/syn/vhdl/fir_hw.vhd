-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (17 downto 0);
    res_V : OUT STD_LOGIC_VECTOR (17 downto 0);
    res_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fir_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_hw,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc6slx9tqg144-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.490000,HLS_SYN_LAT=770,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=100,HLS_SYN_LUT=259}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv18_20001 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal smpl_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal smpl_V_ce0 : STD_LOGIC;
    signal smpl_V_we0 : STD_LOGIC;
    signal smpl_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal smpl_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal coeff_hw_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal coeff_hw_V_ce0 : STD_LOGIC;
    signal coeff_hw_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_1_fu_183_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_525 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_59 : BOOLEAN;
    signal exitcond1_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_205_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_538 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_74 : BOOLEAN;
    signal exitcond_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal accu_V_fu_273_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_105 : BOOLEAN;
    signal p_Val2_2_fu_300_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_2_reg_573 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_114 : BOOLEAN;
    signal p_38_i_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_reg_579 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_584 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_142 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_133 : BOOLEAN;
    signal p_Val2_s_reg_154 : STD_LOGIC_VECTOR (38 downto 0);
    signal i1_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_154 : BOOLEAN;
    signal tmp_14_fu_225_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qbit_fu_217_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_cast_fu_269_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Val2_1_fu_279_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_fu_297_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal newsignbit_fu_306_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_289_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_334_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_350_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal carry_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_372_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_392_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_430_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_i_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_fu_446_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_not_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_mux_fu_499_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_fu_506_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_263_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component fir_hw_mul_18s_15s_33_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fir_hw_smpl_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component fir_hw_coeff_hw_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    smpl_V_U : component fir_hw_smpl_V
    generic map (
        DataWidth => 18,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => smpl_V_address0,
        ce0 => smpl_V_ce0,
        we0 => smpl_V_we0,
        d0 => smpl_V_d0,
        q0 => smpl_V_q0);

    coeff_hw_V_U : component fir_hw_coeff_hw_V
    generic map (
        DataWidth => 15,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coeff_hw_V_address0,
        ce0 => coeff_hw_V_ce0,
        q0 => coeff_hw_V_q0);

    fir_hw_mul_18s_15s_33_3_U0 : component fir_hw_mul_18s_15s_33_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_263_p0,
        din1 => grp_fu_263_p1,
        ce => grp_fu_263_ce,
        dout => grp_fu_263_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i1_reg_166 assign process. --
    i1_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i1_reg_166 <= i_2_reg_538;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_177_p2 = ap_const_lv1_0)))) then 
                i1_reg_166 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- i_reg_142 assign process. --
    i_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                i_reg_142 <= i_1_reg_525;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_142 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- p_Val2_s_reg_154 assign process. --
    p_Val2_s_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                p_Val2_s_reg_154 <= accu_V_fu_273_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_177_p2 = ap_const_lv1_0)))) then 
                p_Val2_s_reg_154 <= ap_const_lv39_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                brmerge_i_reg_584 <= brmerge_i_fu_412_p2;
                p_38_i_reg_579 <= p_38_i_fu_400_p2;
                p_Val2_2_reg_573 <= p_Val2_2_fu_300_p2;
                tmp_10_reg_589 <= tmp_10_fu_440_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_525 <= i_1_fu_183_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_2_reg_538 <= i_2_fu_205_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_199_p2)))) then
                qb_assign_1_reg_553 <= qb_assign_1_fu_249_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_177_p2, exitcond_fu_199_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_177_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_199_p2))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_360_p2 <= "1" when (tmp_4_fu_350_p4 = ap_const_lv4_F) else "0";
    Range1_all_zeros_fu_366_p2 <= "1" when (tmp_4_fu_350_p4 = ap_const_lv4_0) else "0";
    Range2_all_ones_fu_344_p2 <= "1" when (tmp_9_fu_334_p4 = ap_const_lv3_7) else "0";
    accu_V_fu_273_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_154) + unsigned(tmp_9_cast_fu_269_p1));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_105 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_114 assign process. --
    ap_sig_bdd_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_114 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_133 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_154 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_59 assign process. --
    ap_sig_bdd_59_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_59 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_74 assign process. --
    ap_sig_bdd_74_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_74 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_94 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_59)
    begin
        if (ap_sig_bdd_59) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_133)
    begin
        if (ap_sig_bdd_133) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_74)
    begin
        if (ap_sig_bdd_74) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_94)
    begin
        if (ap_sig_bdd_94) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_105)
    begin
        if (ap_sig_bdd_105) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_114)
    begin
        if (ap_sig_bdd_114) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_154)
    begin
        if (ap_sig_bdd_154) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_418_p2 <= (newsignbit_fu_306_p3 and deleted_ones_fu_392_p3);
    brmerge40_i_fu_424_p2 <= (brmerge40_demorgan_i_fu_418_p2 xor ap_const_lv1_1);
    brmerge_fu_493_p2 <= (overflow_fu_465_p2 or underflow_2_not_fu_487_p2);
    brmerge_i_fu_412_p2 <= (newsignbit_fu_306_p3 or p_not_i_fu_406_p2);
    brmerge_i_i_fu_481_p2 <= (underflow_fu_475_p2 or overflow_fu_465_p2);
    carry_fu_320_p2 <= (tmp_15_fu_289_p3 and tmp_6_fu_314_p2);
    coeff_hw_V_address0 <= tmp_1_fu_211_p1(7 - 1 downto 0);

    -- coeff_hw_V_ce0 assign process. --
    coeff_hw_V_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            coeff_hw_V_ce0 <= ap_const_logic_1;
        else 
            coeff_hw_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_fu_392_p3 <= 
        p_41_i_fu_386_p2 when (carry_fu_320_p2(0) = '1') else 
        Range1_all_ones_fu_360_p2;
    deleted_zeros_fu_372_p3 <= 
        Range1_all_ones_fu_360_p2 when (carry_fu_320_p2(0) = '1') else 
        Range1_all_zeros_fu_366_p2;
    exitcond1_fu_177_p2 <= "1" when (i_reg_142 = ap_const_lv7_7F) else "0";
    exitcond_fu_199_p2 <= "1" when (i1_reg_166 = ap_const_lv8_80) else "0";
    grp_fu_263_ce <= ap_const_logic_1;
    grp_fu_263_p0 <= smpl_V_q0;
    grp_fu_263_p1 <= coeff_hw_V_q0;
    i_1_fu_183_p2 <= std_logic_vector(unsigned(i_reg_142) + unsigned(ap_const_lv7_1));
    i_2_fu_205_p2 <= std_logic_vector(unsigned(i1_reg_166) + unsigned(ap_const_lv8_1));
    newsignbit_fu_306_p3 <= p_Val2_2_fu_300_p2(17 downto 17);
    overflow_fu_465_p2 <= (brmerge_i_reg_584 and tmp_3_fu_459_p2);
    p_38_i_fu_400_p2 <= (carry_fu_320_p2 and Range1_all_ones_fu_360_p2);
    p_41_i_fu_386_p2 <= (Range2_all_ones_fu_344_p2 and tmp_7_fu_380_p2);
    p_Val2_1_fu_279_p4 <= p_Val2_s_reg_154(34 downto 17);
    p_Val2_2_fu_300_p2 <= std_logic_vector(unsigned(p_Val2_1_fu_279_p4) + unsigned(tmp_s_fu_297_p1));
    p_Val2_5_fu_506_p3 <= 
        ap_const_lv18_20001 when (underflow_fu_475_p2(0) = '1') else 
        p_Val2_2_reg_573;
    p_Val2_5_mux_fu_499_p3 <= 
        ap_const_lv18_1FFFF when (brmerge_i_i_fu_481_p2(0) = '1') else 
        p_Val2_2_reg_573;
    p_not_i_fu_406_p2 <= (deleted_zeros_fu_372_p3 xor ap_const_lv1_1);
    qb_assign_1_fu_249_p2 <= (r_i_i_fu_243_p2 and qbit_fu_217_p3);
    qbit_fu_217_p3 <= p_Val2_s_reg_154(16 downto 16);
    r_fu_229_p2 <= "0" when (tmp_14_fu_225_p1 = ap_const_lv16_0) else "1";
    r_i_i_fu_243_p2 <= (tmp_16_fu_235_p3 or r_fu_229_p2);
    res_V <= 
        p_Val2_5_mux_fu_499_p3 when (brmerge_fu_493_p2(0) = '1') else 
        p_Val2_5_fu_506_p3;

    -- res_V_ap_vld assign process. --
    res_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            res_V_ap_vld <= ap_const_logic_1;
        else 
            res_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    signbit_fu_446_p3 <= p_Val2_s_reg_154(38 downto 38);

    -- smpl_V_address0 assign process. --
    smpl_V_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_177_p2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, tmp_2_fu_189_p1, tmp_fu_194_p1, tmp_1_fu_211_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            smpl_V_address0 <= tmp_fu_194_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_177_p2 = ap_const_lv1_0)))) then 
            smpl_V_address0 <= ap_const_lv7_7F;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            smpl_V_address0 <= tmp_1_fu_211_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_177_p2 = ap_const_lv1_0))) then 
            smpl_V_address0 <= tmp_2_fu_189_p1(7 - 1 downto 0);
        else 
            smpl_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- smpl_V_ce0 assign process. --
    smpl_V_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_177_p2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_177_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_177_p2 = ap_const_lv1_0))))) then 
            smpl_V_ce0 <= ap_const_logic_1;
        else 
            smpl_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- smpl_V_d0 assign process. --
    smpl_V_d0_assign_proc : process(input_V, smpl_V_q0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_177_p2, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            smpl_V_d0 <= smpl_V_q0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_177_p2 = ap_const_lv1_0)))) then 
            smpl_V_d0 <= input_V;
        else 
            smpl_V_d0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- smpl_V_we0 assign process. --
    smpl_V_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_177_p2, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_177_p2 = ap_const_lv1_0))))) then 
            smpl_V_we0 <= ap_const_logic_1;
        else 
            smpl_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_fu_470_p2 <= (tmp_10_reg_589 and tmp_8_fu_454_p2);
    tmp_10_fu_440_p2 <= (tmp_5_fu_434_p2 or brmerge40_i_fu_424_p2);
    tmp_14_fu_225_p1 <= p_Val2_s_reg_154(16 - 1 downto 0);
    tmp_15_fu_289_p3 <= p_Val2_s_reg_154(34 downto 34);
    tmp_16_fu_235_p3 <= p_Val2_s_reg_154(17 downto 17);
    tmp_18_fu_326_p3 <= p_Val2_s_reg_154(35 downto 35);
    tmp_19_fu_430_p1 <= p_Val2_2_fu_300_p2(17 - 1 downto 0);
    tmp_1_fu_211_p1 <= std_logic_vector(resize(unsigned(i1_reg_166),64));
    tmp_2_fu_189_p1 <= std_logic_vector(resize(unsigned(i_1_fu_183_p2),64));
    tmp_3_fu_459_p2 <= (signbit_fu_446_p3 xor ap_const_lv1_1);
    tmp_4_fu_350_p4 <= p_Val2_s_reg_154(38 downto 35);
    tmp_5_fu_434_p2 <= "1" when (tmp_19_fu_430_p1 = ap_const_lv17_0) else "0";
    tmp_6_fu_314_p2 <= (newsignbit_fu_306_p3 xor ap_const_lv1_1);
    tmp_7_fu_380_p2 <= (tmp_18_fu_326_p3 xor ap_const_lv1_1);
    tmp_8_fu_454_p2 <= (p_38_i_reg_579 xor ap_const_lv1_1);
        tmp_9_cast_fu_269_p1 <= std_logic_vector(resize(signed(grp_fu_263_p2),39));

    tmp_9_fu_334_p4 <= p_Val2_s_reg_154(38 downto 36);
    tmp_fu_194_p1 <= std_logic_vector(resize(unsigned(i_reg_142),64));
    tmp_s_fu_297_p1 <= std_logic_vector(resize(unsigned(qb_assign_1_reg_553),18));
    underflow_2_not_fu_487_p2 <= (underflow_fu_475_p2 xor ap_const_lv1_1);
    underflow_fu_475_p2 <= (tmp2_fu_470_p2 and signbit_fu_446_p3);
end behav;
